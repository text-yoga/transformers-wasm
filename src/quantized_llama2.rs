use std::io::Cursor;

use gloo::console::log;
use tokenizers::Tokenizer;

use candle::quantized::{ggml_file, gguf_file};
use candle::{Device, Tensor};
use candle_transformers::generation::LogitsProcessor;
use tracing_subscriber::fmt::format::Pretty;
use tracing_web::{performance_layer, MakeWebConsoleWriter};

// use candle_examples::token_output_stream::TokenOutputStream;
use candle_transformers::models::quantized_llama as model;
use model::ModelWeights;
use wasm_bindgen::{JsError, JsValue};
use web_time as time;
use wasm_bindgen::prelude::*;

use crate::token_output_stream::TokenOutputStream;
use crate::utils::{load_binary, load_json};
use js_sys::{ArrayBuffer, Uint8Array, JSON};

const DEFAULT_PROMPT: &str = "My favorite theorem is ";

#[derive(Debug)]
enum Prompt {
    // Interactive,
    // Chat,
    One(String),
}

#[derive(Clone, Debug, Copy, PartialEq, Eq)]
#[wasm_bindgen]
pub enum Which {
    L7b,
    L13b,
    L70b,
    L7bChat,
    L13bChat,
    L70bChat,
    L7bCode,
    L13bCode,
    L34bCode,
    Leo7b,
    Leo13b,
    Mistral7b,
    Mistral7bInstruct,
    Mistral7bInstructV02,
    Zephyr7bAlpha,
    Zephyr7bBeta,
    OpenChat35,
    Starling7bAlpha,
    Mixtral,
    MixtralInstruct,
}

impl Which {
    fn is_mistral(&self) -> bool {
        match self {
            Self::L7b
            | Self::L13b
            | Self::L70b
            | Self::L7bChat
            | Self::L13bChat
            | Self::L70bChat
            | Self::L7bCode
            | Self::L13bCode
            | Self::L34bCode
            | Self::Leo7b
            | Self::Leo13b => false,
            // Zephyr and OpenChat are fine tuned versions of mistral and should be treated in the
            // same way. Starling is a fine tuned version of OpenChat.
            Self::OpenChat35
            | Self::Starling7bAlpha
            | Self::Zephyr7bAlpha
            | Self::Zephyr7bBeta
            | Self::Mixtral
            | Self::MixtralInstruct
            | Self::Mistral7b
            | Self::Mistral7bInstruct
            | Self::Mistral7bInstructV02 => true,
        }
    }

    fn is_zephyr(&self) -> bool {
        match self {
            Self::L7b
            | Self::L13b
            | Self::L70b
            | Self::L7bChat
            | Self::L13bChat
            | Self::L70bChat
            | Self::L7bCode
            | Self::L13bCode
            | Self::L34bCode
            | Self::Leo7b
            | Self::Leo13b
            | Self::Mixtral
            | Self::MixtralInstruct
            | Self::Mistral7b
            | Self::Mistral7bInstruct
            | Self::Mistral7bInstructV02
            | Self::OpenChat35
            | Self::Starling7bAlpha => false,
            Self::Zephyr7bAlpha | Self::Zephyr7bBeta => true,
        }
    }

    fn is_open_chat(&self) -> bool {
        match self {
            Self::L7b
            | Self::L13b
            | Self::L70b
            | Self::L7bChat
            | Self::L13bChat
            | Self::L70bChat
            | Self::L7bCode
            | Self::L13bCode
            | Self::L34bCode
            | Self::Leo7b
            | Self::Leo13b
            | Self::Mixtral
            | Self::MixtralInstruct
            | Self::Mistral7b
            | Self::Mistral7bInstruct
            | Self::Mistral7bInstructV02
            | Self::Zephyr7bAlpha
            | Self::Zephyr7bBeta => false,
            Self::OpenChat35 | Self::Starling7bAlpha => true,
        }
    }

    fn tokenizer_repo(&self) -> &'static str {
        match self {
            Which::L7b
            | Which::L13b
            | Which::L70b
            | Which::L7bChat
            | Which::L13bChat
            | Which::L70bChat
            | Which::L7bCode
            | Which::L13bCode
            | Which::L34bCode => "hf-internal-testing/llama-tokenizer",
            Which::Leo7b => "LeoLM/leo-hessianai-7b",
            Which::Leo13b => "LeoLM/leo-hessianai-13b",
            Which::Mixtral => "mistralai/Mixtral-8x7B-v0.1",
            Which::MixtralInstruct => "mistralai/Mixtral-8x7B-Instruct-v0.1",
            Which::Mistral7b
            | Which::Mistral7bInstruct
            | Which::Mistral7bInstructV02
            | Which::Zephyr7bAlpha
            | Which::Zephyr7bBeta => "mistralai/Mistral-7B-v0.1",
            Which::OpenChat35 => "openchat/openchat_3.5",
            Which::Starling7bAlpha => "berkeley-nest/Starling-LM-7B-alpha",
        }
    }
}

// #[derive(Debug)]
#[wasm_bindgen(getter_with_clone)]
pub struct Args {
    /// GGML/GGUF file to load, typically a .bin/.gguf file generated by the quantize command from llama.cpp
    // #[arg(long)]
    pub model: Option<String>,

    /// The initial prompt, use 'interactive' for entering multiple prompts in an interactive way
    /// and 'chat' for an interactive model where history of previous prompts and generated tokens
    /// is preserved.
    // #[arg(long)]
    pub prompt: Option<String>,

    /// The length of the sample to generate (in tokens).
    // #[arg(short = 'n', long, default_value_t = 1000)]
    pub sample_len: usize,

    /// The tokenizer config in json format.
    // #[arg(long)]
    pub tokenizer: Option<String>,

    /// The temperature used to generate samples, use 0 for greedy sampling.
    // #[arg(long, default_value_t = 0.8)]
    pub temperature: f64,

    /// Nucleus sampling probability cutoff.
    // #[arg(long)]
    pub top_p: Option<f64>,

    /// The seed to use when generating random samples.
    // #[arg(long, default_value_t = 299792458)]
    pub seed: u64,

    /// Enable tracing (generates a trace-timestamp.json file).
    // #[arg(long)]
    pub tracing: bool,

    /// Display the token for the specified prompt.
    // #[arg(long)]
    pub verbose_prompt: bool,

    /// Penalty to be applied for repeating tokens, 1. means no penalty.
    // #[arg(long, default_value_t = 1.1)]
    pub repeat_penalty: f32,

    /// The context size to consider for the repeat penalty.
    // #[arg(long, default_value_t = 64)]
    pub repeat_last_n: usize,

    /// The model size to use.
    // #[arg(long, default_value = "7b")]
    pub which: Which,

}

#[wasm_bindgen]
impl Args {
    async fn tokenizer(&self) -> Result<Tokenizer, JsError> {
        // let tokenizer_path = match &self.tokenizer {
        //     Some(config) => std::path::PathBuf::from(config),
        //     None => {
        //         let api = hf_hub::api::sync::Api::new()?;
        //         let repo = self.which.tokenizer_repo();
        //         let api = api.model(repo.to_string());
        //         api.get("tokenizer.json")?
        //     }
        // };
        let tokenizer_url =
            "http://localhost:31300/TinyLlama_TinyLlama-1.1B-Chat-v1.0/tokenizer.json";
        let tokenizer = load_binary(tokenizer_url).await?;
        Tokenizer::from_bytes(tokenizer)
            .map_err(|err| JsError::new("Failed to load tokenizer."))
    }

    async fn model(&self) -> Result<Vec<u8>, JsError> {
        // let model_path = match &self.model {
        //     Some(config) => std::path::PathBuf::from(config),
        //     None => {
        //         let (repo, filename) = match self.which {
        //             Which::L7b => ("TheBloke/Llama-2-7B-GGML", "llama-2-7b.ggmlv3.q4_0.bin"),
        //             Which::L13b => ("TheBloke/Llama-2-13B-GGML", "llama-2-13b.ggmlv3.q4_0.bin"),
        //             Which::L70b => ("TheBloke/Llama-2-70B-GGML", "llama-2-70b.ggmlv3.q4_0.bin"),
        //             Which::L7bChat => (
        //                 "TheBloke/Llama-2-7B-Chat-GGML",
        //                 "llama-2-7b-chat.ggmlv3.q4_0.bin",
        //             ),
        //             Which::L13bChat => (
        //                 "TheBloke/Llama-2-13B-Chat-GGML",
        //                 "llama-2-13b-chat.ggmlv3.q4_0.bin",
        //             ),
        //             Which::L70bChat => (
        //                 "TheBloke/Llama-2-70B-Chat-GGML",
        //                 "llama-2-70b-chat.ggmlv3.q4_0.bin",
        //             ),
        //             Which::L7bCode => ("TheBloke/CodeLlama-7B-GGUF", "codellama-7b.Q8_0.gguf"),
        //             Which::L13bCode => ("TheBloke/CodeLlama-13B-GGUF", "codellama-13b.Q8_0.gguf"),
        //             Which::L34bCode => ("TheBloke/CodeLlama-34B-GGUF", "codellama-34b.Q8_0.gguf"),
        //             Which::Leo7b => (
        //                 "TheBloke/leo-hessianai-7B-GGUF",
        //                 "leo-hessianai-7b.Q4_K_M.gguf",
        //             ),
        //             Which::Leo13b => (
        //                 "TheBloke/leo-hessianai-13B-GGUF",
        //                 "leo-hessianai-13b.Q4_K_M.gguf",
        //             ),
        //             Which::Mixtral => (
        //                 "TheBloke/Mixtral-8x7B-v0.1-GGUF",
        //                 "mixtral-8x7b-v0.1.Q4_K_M.gguf",
        //             ),
        //             Which::MixtralInstruct => (
        //                 "TheBloke/Mixtral-8x7B-Instruct-v0.1-GGUF",
        //                 "mixtral-8x7b-instruct-v0.1.Q4_K_M.gguf",
        //             ),
        //             Which::Mistral7b => (
        //                 "TheBloke/Mistral-7B-v0.1-GGUF",
        //                 "mistral-7b-v0.1.Q4_K_S.gguf",
        //             ),
        //             Which::Mistral7bInstruct => (
        //                 "TheBloke/Mistral-7B-Instruct-v0.1-GGUF",
        //                 "mistral-7b-instruct-v0.1.Q4_K_S.gguf",
        //             ),
        //             Which::Mistral7bInstructV02 => (
        //                 "TheBloke/Mistral-7B-Instruct-v0.2-GGUF",
        //                 "mistral-7b-instruct-v0.2.Q4_K_S.gguf",
        //             ),
        //             Which::Zephyr7bAlpha => (
        //                 "TheBloke/zephyr-7B-alpha-GGUF",
        //                 "zephyr-7b-alpha.Q4_K_M.gguf",
        //             ),
        //             Which::Zephyr7bBeta => {
        //                 ("TheBloke/zephyr-7B-beta-GGUF", "zephyr-7b-beta.Q4_K_M.gguf")
        //             }
        //             Which::OpenChat35 => ("TheBloke/openchat_3.5-GGUF", "openchat_3.5.Q4_K_M.gguf"),
        //             Which::Starling7bAlpha => (
        //                 "TheBloke/Starling-LM-7B-alpha-GGUF",
        //                 "starling-lm-7b-alpha.Q4_K_M.gguf",
        //             ),
        //         };
        //         // let api = hf_hub::api::sync::Api::new()?;
        //         // let api = api.model(repo.to_string());
        //         // api.get(filename)?
        //         load_json("")
        //     }
        // };
        let model_url = "http://localhost:31300/TheBloke_TinyLlama-1.1B-Chat-v1.0-GGUF/tinyllama-1.1b-chat-v1.0.Q4_K_M.gguf";

        let model_path = load_binary(model_url).await?;
        Ok(model_path)
    }
}

fn format_size(size_in_bytes: usize) -> String {
    if size_in_bytes < 1_000 {
        format!("{}B", size_in_bytes)
    } else if size_in_bytes < 1_000_000 {
        format!("{:.2}KB", size_in_bytes as f64 / 1e3)
    } else if size_in_bytes < 1_000_000_000 {
        format!("{:.2}MB", size_in_bytes as f64 / 1e6)
    } else {
        format!("{:.2}GB", size_in_bytes as f64 / 1e9)
    }
}

#[wasm_bindgen]
pub async fn run_model(args: Args) -> Result<(), JsError> {
    use tracing_subscriber::prelude::*;

    // let args = Args::parse();
    let temperature = if args.temperature == 0. {
        None
    } else {
        Some(args.temperature)
    };
    let _guard = if args.tracing {
        let fmt_layer = tracing_subscriber::fmt::layer()
            .with_ansi(false) // Only partially supported across browsers
            .without_time() // std::time is not available in browsers, see note below
            .with_writer(MakeWebConsoleWriter::new()); // write events to the console
        let perf_layer = performance_layer().with_details_from_fields(Pretty::default());

        tracing_subscriber::registry()
            .with(fmt_layer)
            .with(perf_layer)
            .init(); // Install these as subscribers to tracing events

        Some(())
    } else {
        None
    };

    log!(
        "temp: {:.2} repeat-penalty: {:.2} repeat-last-n: {}",
        args.temperature, args.repeat_penalty, args.repeat_last_n
    );

    let model_data = args.model().await?;
    // let mut file = std::fs::File::open(&model_path)?;
    let mut cursor = Cursor::new(&model_data);
    let start = time::Instant::now();

    log!("Loading model...");
    let mut model = 
        // match model_path.extension().and_then(|v| v.to_str()) {
        // Some("gguf") =>
         {
            let model =
                gguf_file::Content::read(&mut cursor).map_err(|e| JsError::new("Failed to read gguf file."))?;
            let mut total_size_in_bytes = 0;
            for (_, tensor) in model.tensor_infos.iter() {
                let elem_count = tensor.shape.elem_count();
                total_size_in_bytes +=
                    elem_count * (tensor.ggml_dtype.type_size() / tensor.ggml_dtype.blck_size());
            }
            log!(format!(
                "loaded {:?} tensors ({}) in {:.2}s",
                model.tensor_infos.len(),
                &format_size(total_size_in_bytes),
                start.elapsed().as_secs_f32())
            );
            ModelWeights::from_gguf(model, &mut cursor).map_err(|err| JsError::new("Failed to load model from gguf file."))?
        };
    //     Some("ggml" | "bin") | Some(_) | None => {
    //         let model = ggml_file::Content::read(&mut file).map_err(|e| e.with_path(model_path))?;
    //         let mut total_size_in_bytes = 0;
    //         for (_, tensor) in model.tensors.iter() {
    //             let elem_count = tensor.shape().elem_count();
    //             total_size_in_bytes +=
    //                 elem_count * tensor.dtype().type_size() / tensor.dtype().blck_size();
    //         }
    //         log!(
    //             "loaded {:?} tensors ({}) in {:.2}s",
    //             model.tensors.len(),
    //             &format_size(total_size_in_bytes),
    //             start.elapsed().as_secs_f32(),
    //         );
    //         log!("params: {:?}", model.hparams);
    //         let default_gqa = match args.which {
    //             Which::L7b
    //             | Which::L13b
    //             | Which::L7bChat
    //             | Which::L13bChat
    //             | Which::L7bCode
    //             | Which::L13bCode
    //             | Which::L34bCode
    //             | Which::Leo7b
    //             | Which::Leo13b => 1,
    //             Which::Mixtral
    //             | Which::MixtralInstruct
    //             | Which::Mistral7b
    //             | Which::Mistral7bInstruct
    //             | Which::Mistral7bInstructV02
    //             | Which::Zephyr7bAlpha
    //             | Which::Zephyr7bBeta
    //             | Which::L70b
    //             | Which::L70bChat
    //             | Which::OpenChat35
    //             | Which::Starling7bAlpha => 8,
    //         };
    //         ModelWeights::from_ggml(model, args.gqa.unwrap_or(default_gqa))?
    //     }
    // };
    log!("...model loaded.");

    let tokenizer = args.tokenizer().await?;
    let mut tos = TokenOutputStream::new(tokenizer);
    let prompt = match args.prompt.as_deref() {
        // Some("chat") => Prompt::Chat,
        // Some("interactive") => Prompt::Interactive,
        Some(s) => Prompt::One(s.to_string()),
        None => Prompt::One(DEFAULT_PROMPT.to_string()),
    };

    let mut pre_prompt_tokens = vec![];
    for prompt_index in 0.. {
        let prompt_str = match &prompt {
            Prompt::One(prompt) => prompt.clone(),
            // Prompt::Interactive | Prompt::Chat => {
            //     let is_interactive = matches!(prompt, Prompt::Interactive);
            //     log!("> ");
            //     // std::io::stdout().flush()?;
            //     let mut prompt = String::new();
            //     std::io::stdin().read_line(&mut prompt)?;
            //     if prompt.ends_with('\n') {
            //         prompt.pop();
            //         if prompt.ends_with('\r') {
            //             prompt.pop();
            //         }
            //     }
            //     if args.which.is_open_chat() {
            //         format!("GPT4 Correct User: {prompt}<|end_of_turn|>GPT4 Correct Assistant:")
            //     } else if args.which.is_zephyr() {
            //         if prompt_index == 0 || is_interactive {
            //             format!("<|system|>\n</s>\n<|user|>\n{prompt}</s>\n<|assistant|>",)
            //         } else {
            //             format!("<|user|>\n{prompt}</s>\n<|assistant|>")
            //         }
            //     } else if args.which.is_mistral() {
            //         format!("[INST] {prompt} [/INST]")
            //     } else {
            //         prompt
            //     }
            // }
        };
        log!("{}", &prompt_str);
        let tokens = tos
            .tokenizer()
            .encode(prompt_str, true)
            .map_err(|err| JsError::new("Failed to encode tokens"))?;
        if args.verbose_prompt {
            for (token, id) in tokens.get_tokens().iter().zip(tokens.get_ids().iter()) {
                let token = token.replace('▁', " ").replace("<0x0A>", "\n");
                log!(format!("{id:7} -> '{token}'"));
            }
        }

        let prompt_tokens = [&pre_prompt_tokens, tokens.get_ids()].concat();
        let to_sample = args.sample_len.saturating_sub(1);
        let prompt_tokens = if prompt_tokens.len() + to_sample > model::MAX_SEQ_LEN - 10 {
            let to_remove = prompt_tokens.len() + to_sample + 10 - model::MAX_SEQ_LEN;
            prompt_tokens[prompt_tokens.len().saturating_sub(to_remove)..].to_vec()
        } else {
            prompt_tokens
        };
        let mut all_tokens = vec![];
        let mut logits_processor = LogitsProcessor::new(args.seed, temperature, args.top_p);

        log!("Starting prompt processing.");
        let start_prompt_processing = time::Instant::now();
        
        let mut next_token = {
            let input = Tensor::new(prompt_tokens.as_slice(), &Device::Cpu)?.unsqueeze(0)?;
            let  x: Vec<u8> = (&input.shape().clone().into_dims().into_iter().map(|u| (u as u8).clone()  ).collect::<Vec<u8>>()).clone();
            let x = js_sys::Uint8Array::from(x.as_slice());
            log!("Shape: ", x);
            log!("Calculating forward pass of next token...");
            let logits = model.forward(&input, 0)?;
            log!("...done!");
            let logits = logits.squeeze(0)?;
            logits_processor.sample(&logits).map_err(|err| JsError::new("Failed to sample logits."))?
        };
        let prompt_dt = start_prompt_processing.elapsed();
        all_tokens.push(next_token);
        if let Some(t) = tos.next_token(next_token)? {
            log!(format!("{t}"));
            // std::io::stdout().flush()?;
        }

        let eos_token = if args.which.is_open_chat() {
            "<|end_of_turn|>"
        } else {
            "</s>"
        };
        let eos_token = *tos.tokenizer().get_vocab(true).get(eos_token).unwrap();
        let start_post_prompt = time::Instant::now();
        let mut sampled = 0;
        log!("Starting sample phase, sample size:", sampled);
        for index in 0..to_sample {
            let input = Tensor::new(&[next_token], &Device::Cpu)?.unsqueeze(0)?;
            log!("Starting forward pass...");
            let logits = model.forward(&input, prompt_tokens.len() + index)?;
            log!("...done!");
            let logits = logits.squeeze(0)?;
            let logits = if args.repeat_penalty == 1. {
                logits
            } else {
                let start_at = all_tokens.len().saturating_sub(args.repeat_last_n);
                candle_transformers::utils::apply_repeat_penalty(
                    &logits,
                    args.repeat_penalty,
                    &all_tokens[start_at..],
                )?
            };
            next_token = logits_processor.sample(&logits)?;
            all_tokens.push(next_token);
            if let Some(t) = tos.next_token(next_token)? {
                log!(format!("{t}"));
                // std::io::stdout().flush()?;
            }
            sampled += 1;
            if next_token == eos_token {
                break;
            };
        }
        if let Some(rest) = tos.decode_rest().map_err(candle::Error::msg)? {
            log!("{rest}");
        }
        // std::io::stdout().flush()?;
        let dt = start_post_prompt.elapsed();
        log!(format!(
            "\n\n{:4} prompt tokens processed: {:.2} token/s",
            prompt_tokens.len(),
            prompt_tokens.len() as f64 / prompt_dt.as_secs_f64(),
        ));
        log!(format!(
            "{sampled:4} tokens generated: {:.2} token/s",
            sampled as f64 / dt.as_secs_f64(),
        ));

        match prompt {
            Prompt::One(_) => break,
            // Prompt::Interactive => {}
            // Prompt::Chat => {
            //     pre_prompt_tokens = [prompt_tokens.as_slice(), all_tokens.as_slice()].concat()
            // }
        }
    }

    Ok(())
}
